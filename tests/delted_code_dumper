
    # def reset_reading_stream(self, rest_request_list: list, quote_manager_id) -> list:
    #     """
    #     :param rest_request_list: list of dictionary {root, date, expiration, sync_time}
    #     :return: list of pairs (root, date, expiration, bool) where bool is True if the reading stream is reset
    #     """
    #     reset_result_list = []
    #     for request in rest_request_list:
    #         root = request.get('root')
    #         date = request.get('date')
    #         expiration = request.get('expiration')
    #         sync_time = request.get('sync_time')
    #         if (root, date, expiration, quote_manager_id) in self.quote_reader_dict:
    #             quote_reader = self.quote_reader_dict.get((root, date, expiration, quote_manager_id))
    #             if quote_reader.get_last_msd() != sync_time:
    #                 quote_reader.reset_msd(sync_time)
    #                 reset_result_list.append((root, date, expiration, True, 'reading stream is reset'))
    #         else:
    #             reset_result_list.append((root, date, expiration, False, 'reading stream does not exist'))
    #     return reset_result_list




         # DONE: sync the quote board with reading stream in the data manager;
        #  generate the params for the data manager to reset the reading stream based on sync_request_params
        sync_request_list: List[dict] = [] # list of sync request params
        sync_root_date_expiration_dict = {} # (root, date) as key, list of expirations as value
        for quote_board in quote_board_to_sync:
            root = quote_board.get_root()
            date = quote_board.get_date()
            expirations = quote_board.get_expirations()
            for expiration in expirations:
                expiration_list = sync_root_date_expiration_dict.get((root, date), [])
                expiration_list.append(expiration)
                sync_root_date_expiration_dict[(root, date)] = expiration_list
            # TODO: change for double verification of the sync
            quote_board.set_time(new_time=sync_time)
        for (root, date), expiration_list in sync_root_date_expiration_dict.items():
            for expiration in expiration_list:
                _aggregate_sync_request_params_to_list(sync_request_list, root, date, sync_time, expiration)
        sync_reset_result_list = self.data_manager.reset_reading_stream(sync_request_list, self.id)
        # TODO: add double check to see if the sync is successful (for now assume it is successful)




    def _check_expiration(self, roots: List[str], date: int):
        """
        Check if the expiration dates for the roots and date are available in the expirations dictionary. If not
        available, update the expiration dates for the roots and date.
        """
        for root in roots:
            if (root, date) not in self.expiration_dict:
                self._update_expiration(root, date)

    # def _update_expiration(self, roots: List[str], date: int, quote_folder_name: str):
    #     """
    #     Update the dictionary of expirations with the root and date; Given the pair of root and date, there should be
    #     available expiration dates in the dictionary through checking up the data source.
    #
    #     TODO: write a function based on root and date. And check what is the available expiration dates. Basically
    #          just got to that SPX/raw_traeded_quote/2014/01/ folder and check based on the date, what is the available
    #          expirations dates: xxxxxxxx_20140101.csv. All xxxxxxxx should be put into a list that will be returned and stored
    #          into the self.expirations dictionary with key (root, date).
    #     """
    #     roots_expiration_dict = self.roots_expiration_dict
    #     expiration_dict = self.expiration_dict #expiration_dict = dict(zip(roots, [] * len(roots)))
    #     root_system = self.root_system
    #     year = str(date)[:4]
    #     month = str(date)[4:6]
    #     func = _update_expiration_dict
    #     func_params = dict(date=date, roots_expiration_dict=roots_expiration_dict, expiration_dict=expiration_dict)
    #     condition_params = {quote_folder_name: roots}
    #     walk_in_process(root_system, [quote_folder_name, year, month], func, func_params, condition_params)